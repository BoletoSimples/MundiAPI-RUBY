# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module MundiApi
  class TokensController < BaseController
    @@instance = TokensController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Gets a token from its id
    # @param [String] id Required parameter: Token id
    # @param [String] public_key Required parameter: Public key
    # @return GetTokenResponse response from the API call
    def get_token(id,
                  public_key)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/tokens/{id}?appId={public_key}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'id' => id,
        'public_key' => public_key
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetTokenResponse.from_hash(decoded)
    end

    # TODO: type endpoint description here
    # @param [String] public_key Required parameter: Public key
    # @param [CreateTokenRequest] request Required parameter: Request for creating a token
    # @return GetTokenResponse response from the API call
    def create_token(public_key,
                     request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/tokens?appId={public_key}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'public_key' => public_key
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetTokenResponse.from_hash(decoded)
    end
  end
end
