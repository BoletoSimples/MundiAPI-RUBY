# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module MundiApi
  class PlansController < BaseController
    @@instance = PlansController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Updates a plan item
    # @param [String] plan_id Required parameter: Plan id
    # @param [String] plan_item_id Required parameter: Plan item id
    # @param [UpdatePlanItemRequest] body Required parameter: Request for updating the plan item
    # @return GetPlanItemResponse response from the API call
    def update_plan_item(plan_id,
                         plan_item_id,
                         body)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/plans/{plan_id}/items/{plan_item_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'plan_id' => plan_id,
        'plan_item_id' => plan_item_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.put _query_url, headers: _headers, parameters: body.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetPlanItemResponse.from_hash(decoded)
    end

    # Gets a plan
    # @param [String] plan_id Required parameter: Plan id
    # @return GetPlanResponse response from the API call
    def get_plan(plan_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/plans/{plan_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'plan_id' => plan_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetPlanResponse.from_hash(decoded)
    end

    # Adds a new item to a plan
    # @param [String] plan_id Required parameter: Plan id
    # @param [CreatePlanItemRequest] request Required parameter: Request for creating a plan item
    # @return GetPlanItemResponse response from the API call
    def create_plan_item(plan_id,
                         request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/plans/{plan_id}/items'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'plan_id' => plan_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetPlanItemResponse.from_hash(decoded)
    end

    # Updates a plan
    # @param [String] plan_id Required parameter: Plan id
    # @param [UpdatePlanRequest] request Required parameter: Request for updating a plan
    # @return GetPlanResponse response from the API call
    def update_plan(plan_id,
                    request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/plans/{plan_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'plan_id' => plan_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.put _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetPlanResponse.from_hash(decoded)
    end

    # Creates a new plan
    # @param [CreatePlanRequest] body Required parameter: Request for creating a plan
    # @return GetPlanResponse response from the API call
    def create_plan(body)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/plans'
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: body.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetPlanResponse.from_hash(decoded)
    end

    # Gets all plans
    # @return ListPlansResponse response from the API call
    def get_plans

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/plans'
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return ListPlansResponse.from_hash(decoded)
    end

    # Deletes a plan
    # @param [String] plan_id Required parameter: Plan id
    # @return GetPlanResponse response from the API call
    def delete_plan(plan_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/plans/{plan_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'plan_id' => plan_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.delete _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetPlanResponse.from_hash(decoded)
    end

    # Gets a plan item
    # @param [String] plan_id Required parameter: Plan id
    # @param [String] plan_item_id Required parameter: Plan item id
    # @return GetPlanItemResponse response from the API call
    def get_plan_item(plan_id,
                      plan_item_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/plans/{plan_id}/items/{plan_item_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'plan_id' => plan_id,
        'plan_item_id' => plan_item_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetPlanItemResponse.from_hash(decoded)
    end

    # Removes an item from a plan
    # @param [String] plan_id Required parameter: Plan id
    # @param [String] plan_item_id Required parameter: Plan item id
    # @return GetPlanItemResponse response from the API call
    def delete_plan_item(plan_id,
                         plan_item_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/plans/{plan_id}/items/{plan_item_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'plan_id' => plan_id,
        'plan_item_id' => plan_item_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.delete _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetPlanItemResponse.from_hash(decoded)
    end

    # Updates the metadata from a plan
    # @param [String] plan_id Required parameter: The plan id
    # @param [UpdateMetadataRequest] request Required parameter: Request for updating the plan metadata
    # @return GetPlanResponse response from the API call
    def update_plan_metadata(plan_id,
                             request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/Plans/{plan_id}/metadata'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'plan_id' => plan_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.patch _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetPlanResponse.from_hash(decoded)
    end
  end
end
