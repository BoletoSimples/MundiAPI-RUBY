# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module MundiApi
  class CustomersController < BaseController
    @@instance = CustomersController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Gets all adressess from a customer
    # @param [String] customer_id Required parameter: Customer id
    # @return ListAddressesResponse response from the API call
    def get_addresses(customer_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/addresses'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return ListAddressesResponse.from_hash(decoded)
    end

    # Get all cards from a customer
    # @param [String] customer_id Required parameter: Customer Id
    # @return ListCardsResponse response from the API call
    def get_cards(customer_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/cards'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return ListCardsResponse.from_hash(decoded)
    end

    # Get all Customers
    # @return ListCustomersResponse response from the API call
    def get_customers

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers'
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return ListCustomersResponse.from_hash(decoded)
    end

    # Creates a new customer
    # @param [CreateCustomerRequest] request Required parameter: Request for creating a customer
    # @return GetCustomerResponse response from the API call
    def create_customer(request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers'
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetCustomerResponse.from_hash(decoded)
    end

    # Get a customer
    # @param [String] customer_id Required parameter: Customer Id
    # @return GetCustomerResponse response from the API call
    def get_customer(customer_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetCustomerResponse.from_hash(decoded)
    end

    # Updates an address
    # @param [String] customer_id Required parameter: Customer Id
    # @param [String] address_id Required parameter: Address Id
    # @param [UpdateAddressRequest] request Required parameter: Request for updating an address
    # @return GetAddressResponse response from the API call
    def update_address(customer_id,
                       address_id,
                       request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/addresses/{address_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id,
        'address_id' => address_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.put _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetAddressResponse.from_hash(decoded)
    end

    # Updates a card
    # @param [String] customer_id Required parameter: Customer Id
    # @param [String] card_id Required parameter: Card id
    # @param [UpdateCardRequest] request Required parameter: Request for updating a card
    # @return GetCardResponse response from the API call
    def update_card(customer_id,
                    card_id,
                    request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/cards/{card_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id,
        'card_id' => card_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.put _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetCardResponse.from_hash(decoded)
    end

    # Get a customer's address
    # @param [String] customer_id Required parameter: Customer id
    # @param [String] address_id Required parameter: Address Id
    # @return GetAddressResponse response from the API call
    def get_address(customer_id,
                    address_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/addresses/{address_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id,
        'address_id' => address_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetAddressResponse.from_hash(decoded)
    end

    # Delete a Customer's address
    # @param [String] customer_id Required parameter: Customer Id
    # @param [String] address_id Required parameter: Address Id
    # @return GetAddressResponse response from the API call
    def delete_address(customer_id,
                       address_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/addresses/{address_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id,
        'address_id' => address_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.delete _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetAddressResponse.from_hash(decoded)
    end

    # Delete a customer's card
    # @param [String] customer_id Required parameter: Customer Id
    # @param [String] card_id Required parameter: Card Id
    # @return GetCardResponse response from the API call
    def delete_card(customer_id,
                    card_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/cards/{card_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id,
        'card_id' => card_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.delete _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetCardResponse.from_hash(decoded)
    end

    # Creates a new address for a customer
    # @param [String] customer_id Required parameter: Customer Id
    # @param [CreateAddressRequest] request Required parameter: Request for creating an address
    # @return GetAddressResponse response from the API call
    def create_address(customer_id,
                       request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/addresses'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetAddressResponse.from_hash(decoded)
    end

    # Get a customer's card
    # @param [String] customer_id Required parameter: Customer id
    # @param [String] card_id Required parameter: Card id
    # @return GetCardResponse response from the API call
    def get_card(customer_id,
                 card_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/cards/{card_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id,
        'card_id' => card_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetCardResponse.from_hash(decoded)
    end

    # Creates a new card for a customer
    # @param [String] customer_id Required parameter: Customer id
    # @param [CreateCardRequest] request Required parameter: Request for creating a card
    # @return GetCardResponse response from the API call
    def create_card(customer_id,
                    request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/cards'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetCardResponse.from_hash(decoded)
    end

    # Updates a customer
    # @param [String] customer_id Required parameter: Customer id
    # @param [UpdateCustomerRequest] request Required parameter: Request for updating a customer
    # @return GetCustomerResponse response from the API call
    def update_customer(customer_id,
                        request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.put _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetCustomerResponse.from_hash(decoded)
    end

    # Delete a Customer's access tokens
    # @param [String] customer_id Required parameter: Customer Id
    # @return ListAccessTokensResponse response from the API call
    def delete_access_tokens(customer_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/access-tokens/'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return ListAccessTokensResponse.from_hash(decoded)
    end

    # Get all access tokens from a customer
    # @param [String] customer_id Required parameter: Customer Id
    # @return ListAccessTokensResponse response from the API call
    def get_access_tokens(customer_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/access-tokens'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return ListAccessTokensResponse.from_hash(decoded)
    end

    # Delete a customer's access token
    # @param [String] customer_id Required parameter: Customer Id
    # @param [String] token_id Required parameter: Token Id
    # @return GetAccessTokenResponse response from the API call
    def delete_access_token(customer_id,
                            token_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/access-tokens/{token_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id,
        'token_id' => token_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.delete _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetAccessTokenResponse.from_hash(decoded)
    end

    # Creates a access token for a customer
    # @param [String] customer_id Required parameter: Customer Id
    # @param [CreateAccessTokenRequest] request Required parameter: Request for creating a access token
    # @return GetAccessTokenResponse response from the API call
    def create_access_token(customer_id,
                            request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/access-tokens'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetAccessTokenResponse.from_hash(decoded)
    end

    # Get a Customer's access token
    # @param [String] customer_id Required parameter: Customer Id
    # @param [String] token_id Required parameter: Token Id
    # @return GetAccessTokenResponse response from the API call
    def get_access_token(customer_id,
                         token_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/customers/{customer_id}/access-tokens/{token_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id,
        'token_id' => token_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetAccessTokenResponse.from_hash(decoded)
    end

    # Updates the metadata a customer
    # @param [String] customer_id Required parameter: The customer id
    # @param [UpdateMetadataRequest] request Required parameter: Request for updating the customer metadata
    # @return GetCustomerResponse response from the API call
    def update_customer_metadata(customer_id,
                                 request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/Customers/{customer_id}/metadata'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'customer_id' => customer_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.patch _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetCustomerResponse.from_hash(decoded)
    end
  end
end
