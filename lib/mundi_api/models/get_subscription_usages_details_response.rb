# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MundiApi
  # GetSubscriptionUsagesDetailsResponse Model.
  class GetSubscriptionUsagesDetailsResponse < BaseModel
    # Subscription Identifier
    # @return [String]
    attr_accessor :subscription_id

    # Current Invoice Amount
    # @return [Integer]
    attr_accessor :total_amount

    # Period Details
    # @return [GetPeriodResponse]
    attr_accessor :period

    # Usages Details
    # @return [List of GetUsageResponse]
    attr_accessor :usages

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['subscription_id'] = 'subscription_id'
      @_hash['total_amount'] = 'total_amount'
      @_hash['period'] = 'Period'
      @_hash['usages'] = 'Usages'
      @_hash
    end

    def initialize(subscription_id = nil,
                   total_amount = nil,
                   period = nil,
                   usages = nil)
      @subscription_id = subscription_id
      @total_amount = total_amount
      @period = period
      @usages = usages
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      subscription_id = hash['subscription_id']
      total_amount = hash['total_amount']
      period = GetPeriodResponse.from_hash(hash['Period']) if hash['Period']
      # Parameter is an array, so we need to iterate through it
      usages = nil
      unless hash['Usages'].nil?
        usages = []
        hash['Usages'].each do |structure|
          usages << (GetUsageResponse.from_hash(structure) if structure)
        end
      end

      # Create object from extracted values.
      GetSubscriptionUsagesDetailsResponse.new(subscription_id,
                                               total_amount,
                                               period,
                                               usages)
    end
  end
end
