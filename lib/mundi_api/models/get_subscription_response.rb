# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

require 'date'
module MundiApi
  class GetSubscriptionResponse < BaseModel
    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :code

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :start_at

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :interval

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :interval_count

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :billing_type

    # TODO: Write general description for this method
    # @return [GetPeriodResponse]
    attr_accessor :current_period

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :payment_method

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :currency

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :installments

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :status

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :created_at

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :updated_at

    # TODO: Write general description for this method
    # @return [GetCustomerResponse]
    attr_accessor :customer

    # TODO: Write general description for this method
    # @return [GetCardResponse]
    attr_accessor :card

    # TODO: Write general description for this method
    # @return [List of GetSubscriptionItemResponse]
    attr_accessor :items

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :statement_descriptor

    # TODO: Write general description for this method
    # @return [Array<String, String>]
    attr_accessor :metadata

    # TODO: Write general description for this method
    # @return [GetSetupResponse]
    attr_accessor :setup

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :next_billing_at

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :billing_day

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :minimum_price

    # TODO: Write general description for this method
    # @return [DateTime]
    attr_accessor :canceled_at

    # Subscription discounts
    # @return [List of GetDiscountResponse]
    attr_accessor :discounts

    # A mapping from model property names to API property names
    def self.names
      if @_hash.nil?
        @_hash = {}
        @_hash["id"] = "id"
        @_hash["code"] = "code"
        @_hash["start_at"] = "start_at"
        @_hash["interval"] = "interval"
        @_hash["interval_count"] = "interval_count"
        @_hash["billing_type"] = "billing_type"
        @_hash["current_period"] = "current_period"
        @_hash["payment_method"] = "payment_method"
        @_hash["currency"] = "currency"
        @_hash["installments"] = "installments"
        @_hash["status"] = "status"
        @_hash["created_at"] = "created_at"
        @_hash["updated_at"] = "updated_at"
        @_hash["customer"] = "customer"
        @_hash["card"] = "card"
        @_hash["items"] = "items"
        @_hash["statement_descriptor"] = "statement_descriptor"
        @_hash["metadata"] = "metadata"
        @_hash["setup"] = "setup"
        @_hash["next_billing_at"] = "next_billing_at"
        @_hash["billing_day"] = "billing_day"
        @_hash["minimum_price"] = "minimum_price"
        @_hash["canceled_at"] = "canceled_at"
        @_hash["discounts"] = "discounts"
      end
      @_hash
    end

    def initialize(id = nil,
                   code = nil,
                   start_at = nil,
                   interval = nil,
                   interval_count = nil,
                   billing_type = nil,
                   current_period = nil,
                   payment_method = nil,
                   currency = nil,
                   installments = nil,
                   status = nil,
                   created_at = nil,
                   updated_at = nil,
                   customer = nil,
                   card = nil,
                   items = nil,
                   statement_descriptor = nil,
                   metadata = nil,
                   setup = nil,
                   next_billing_at = nil,
                   billing_day = nil,
                   minimum_price = nil,
                   canceled_at = nil,
                   discounts = nil)
      @id = id
      @code = code
      @start_at = start_at
      @interval = interval
      @interval_count = interval_count
      @billing_type = billing_type
      @current_period = current_period
      @payment_method = payment_method
      @currency = currency
      @installments = installments
      @status = status
      @created_at = created_at
      @updated_at = updated_at
      @customer = customer
      @card = card
      @items = items
      @statement_descriptor = statement_descriptor
      @metadata = metadata
      @setup = setup
      @next_billing_at = next_billing_at
      @billing_day = billing_day
      @minimum_price = minimum_price
      @canceled_at = canceled_at
      @discounts = discounts
    end

    # Creates an instance of the object from a hash
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash
      id = hash['id']
      code = hash['code']
      start_at = DateTime.rfc3339(hash['start_at']) if hash['start_at']
      interval = hash['interval']
      interval_count = hash['interval_count']
      billing_type = hash['billing_type']
      current_period = GetPeriodResponse.from_hash(hash['current_period']) if hash['current_period']
      payment_method = hash['payment_method']
      currency = hash['currency']
      installments = hash['installments']
      status = hash['status']
      created_at = DateTime.rfc3339(hash['created_at']) if hash['created_at']
      updated_at = DateTime.rfc3339(hash['updated_at']) if hash['updated_at']
      customer = GetCustomerResponse.from_hash(hash['customer']) if hash['customer']
      card = GetCardResponse.from_hash(hash['card']) if hash['card']
      # Parameter is an array, so we need to iterate through it
      items = nil
      if hash['items'] != nil
        items = Array.new
        hash['items'].each{|structure| items << (GetSubscriptionItemResponse.from_hash(structure) if structure)}
      end
      statement_descriptor = hash['statement_descriptor']
      metadata = hash['metadata']
      setup = GetSetupResponse.from_hash(hash['setup']) if hash['setup']
      next_billing_at = DateTime.rfc3339(hash['next_billing_at']) if hash['next_billing_at']
      billing_day = hash['billing_day']
      minimum_price = hash['minimum_price']
      canceled_at = DateTime.rfc3339(hash['canceled_at']) if hash['canceled_at']
      # Parameter is an array, so we need to iterate through it
      discounts = nil
      if hash['discounts'] != nil
        discounts = Array.new
        hash['discounts'].each{|structure| discounts << (GetDiscountResponse.from_hash(structure) if structure)}
      end

      # Create object from extracted values
      GetSubscriptionResponse.new(id,
                                  code,
                                  start_at,
                                  interval,
                                  interval_count,
                                  billing_type,
                                  current_period,
                                  payment_method,
                                  currency,
                                  installments,
                                  status,
                                  created_at,
                                  updated_at,
                                  customer,
                                  card,
                                  items,
                                  statement_descriptor,
                                  metadata,
                                  setup,
                                  next_billing_at,
                                  billing_day,
                                  minimum_price,
                                  canceled_at,
                                  discounts)
    end
  end
end
