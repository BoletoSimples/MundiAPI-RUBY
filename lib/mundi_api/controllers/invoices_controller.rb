# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module MundiApi
  class InvoicesController < BaseController
    @@instance = InvoicesController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Cancels an invoice
    # @param [String] invoice_id Required parameter: Invoice id
    # @return GetInvoiceResponse response from the API call
    def cancel_invoice(invoice_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/invoices/{invoice_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'invoice_id' => invoice_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.delete _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetInvoiceResponse.from_hash(decoded)
    end

    # Gets the last charge from an invoice
    # @param [String] invoice_id Required parameter: Invoice id
    # @return GetChargeResponse response from the API call
    def get_last_invoice_charge(invoice_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/invoices/{invoice_id}/last-charge'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'invoice_id' => invoice_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetChargeResponse.from_hash(decoded)
    end

    # Gets all invoices
    # @return ListInvoicesResponse response from the API call
    def get_invoices

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/invoices'
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return ListInvoicesResponse.from_hash(decoded)
    end

    # Gets an invoice
    # @param [String] invoice_id Required parameter: Invoice Id
    # @return GetInvoiceResponse response from the API call
    def get_invoice(invoice_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/invoices/{invoice_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'invoice_id' => invoice_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetInvoiceResponse.from_hash(decoded)
    end
  end
end
