# This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).

module MundiApi
  class ChargesController < BaseController
    @@instance = ChargesController.new
    # Singleton instance of the controller class
    def self.instance
      @@instance
    end

    # Get a charge from its id
    # @param [String] charge_id Required parameter: Charge id
    # @return GetChargeResponse response from the API call
    def get_charge(charge_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/charges/{charge_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'charge_id' => charge_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetChargeResponse.from_hash(decoded)
    end

    # Retries a charge
    # @param [String] charge_id Required parameter: Charge id
    # @return GetChargeResponse response from the API call
    def retry_charge(charge_id)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/charges/{charge_id}/retry'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'charge_id' => charge_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetChargeResponse.from_hash(decoded)
    end

    # Lists all charges
    # @return ListChargesResponse response from the API call
    def get_charges

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/charges'
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json'
      }

      # prepare and execute HttpRequest
      _request = @http_client.get _query_url, headers: _headers
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return ListChargesResponse.from_hash(decoded)
    end

    # Creates a new charge
    # @param [CreateChargeRequest] request Required parameter: Request for creating a charge
    # @return GetChargeResponse response from the API call
    def create_charge(request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/Charges'
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetChargeResponse.from_hash(decoded)
    end

    # Updates the card from a charge
    # @param [String] charge_id Required parameter: Charge id
    # @param [UpdateChargeCardRequest] request Required parameter: Request for updating a charge's card
    # @return GetChargeResponse response from the API call
    def update_charge_card(charge_id,
                           request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/charges/{charge_id}/card'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'charge_id' => charge_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.patch _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetChargeResponse.from_hash(decoded)
    end

    # Updates a charge's payment method
    # @param [String] charge_id Required parameter: Charge id
    # @param [UpdateChargePaymentMethodRequest] request Required parameter: Request for updating the payment method from a charge
    # @return GetChargeResponse response from the API call
    def update_charge_payment_method(charge_id,
                                     request)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/charges/{charge_id}/payment-method'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'charge_id' => charge_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.patch _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetChargeResponse.from_hash(decoded)
    end

    # Cancel a charge
    # @param [String] charge_id Required parameter: Charge id
    # @param [CreateCancelChargeRequest] request Optional parameter: Request for cancelling a charge
    # @return GetChargeResponse response from the API call
    def cancel_charge(charge_id,
                      request = nil)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/charges/{charge_id}'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'charge_id' => charge_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.delete _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetChargeResponse.from_hash(decoded)
    end

    # Captures a charge
    # @param [String] charge_id Required parameter: Charge id
    # @param [CreateCaptureChargeRequest] request Optional parameter: Request for capturing a charge
    # @return GetChargeResponse response from the API call
    def capture_charge(charge_id,
                       request = nil)

      # prepare query url
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/charges/{charge_id}/capture'
      _query_builder = APIHelper.append_url_with_template_parameters _query_builder, {
        'charge_id' => charge_id
      }
      _query_url = APIHelper.clean_url _query_builder

      # prepare headers
      _headers = {
        'accept' => 'application/json',
        'content-type' => 'application/json; charset=utf-8'
      }

      # prepare and execute HttpRequest
      _request = @http_client.post _query_url, headers: _headers, parameters: request.to_json
      BasicAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)

      # return appropriate response type
      decoded = APIHelper.json_deserialize(_context.response.raw_body)
      return GetChargeResponse.from_hash(decoded)
    end
  end
end
